module.exports = {
    env: {
        browser: true,
        es6: true,
        mocha: true,
        node: true,
    },

    extends: [
        'eslint:all',
        'plugin:import/errors',
        'plugin:node/recommended',
        'plugin:unicorn/all',
    ],

    parserOptions: {
        sourceType: 'module',
    },

    plugins: [
        'jsdoc',
        'import',
        'node',
        'simple-import-sort',
        'sort-destructure-keys',
        'unicorn',
    ],

    rules: {
        // import
        'import/exports-last': 'error',
        'import/extensions': [
            'error',
            {
                ignorePackages: true,
                pattern: {
                    js: 'always',
                },
            },
        ],
        'import/first': 'error',
        'import/namespace': ['error', {allowComputed: true}],
        'import/newline-after-import': 'error',
        'import/no-unresolved': [
            'error',
            {ignore: ['^node:', '^chalk$', '^p-queue$', '^got$']},
        ],

        // sort-destructure-keys
        'sort-destructure-keys/sort-destructure-keys': 'error',

        // simple-import-sort
        'simple-import-sort/imports': 'error',
        'simple-import-sort/exports': 'error',

        // node
        'node/exports-style': 'error',
        'node/no-missing-import': 'off',
        'node/prefer-global/buffer': 'error',
        'node/prefer-global/console': 'error',
        'node/prefer-global/process': 'error',
        'node/prefer-global/text-decoder': 'error',
        'node/prefer-global/text-encoder': 'error',
        'node/prefer-global/url-search-params': 'error',
        'node/prefer-global/url': 'error',
        'node/prefer-promises/dns': 'error',
        'node/prefer-promises/fs': 'error',

        // unicorn
        'unicorn/catch-error-name': ['error', {name: 'err'}],
        'unicorn/filename-case': 'off',
        'unicorn/import-index': 'off',
        'unicorn/import-style': 'off',
        'unicorn/no-array-callback-reference': 'off',
        'unicorn/no-array-for-each': 'off',
        'unicorn/no-array-reduce': 'off',
        'unicorn/no-null': 'off',
        'unicorn/no-process-exit': 'off',
        'unicorn/no-unsafe-regex': 'off',
        'unicorn/prefer-module': 'off',
        'unicorn/prefer-regexp-test': 'off',
        'unicorn/prefer-top-level-await': 'off',
        'unicorn/prevent-abbreviations': 'off',
        'unicorn/require-array-join-separator': 'off',

        // jsdoc
        'jsdoc/check-alignment': 'error',
        'jsdoc/check-indentation': 'error',
        'jsdoc/check-param-names': 'error',
        'jsdoc/check-tag-names': 'error',
        'jsdoc/check-types': 'error',
        'jsdoc/newline-after-description': ['error', 'never'],
        'jsdoc/no-undefined-types': 'error',
        'jsdoc/require-hyphen-before-param-description': ['error', 'never'],
        'jsdoc/require-jsdoc': [
            'error',
            {
                require: {
                    ArrowFunctionExpression: true,
                    ClassDeclaration: true,
                    ClassExpression: true,
                    FunctionDeclaration: true,
                    FunctionExpression: true,
                    MethodDefinition: true,
                },
                publicOnly: true,
            },
        ],
        'jsdoc/require-param-name': 'error',
        'jsdoc/require-param-type': 'error',
        'jsdoc/require-param': 'error',
        'jsdoc/require-returns-check': 'error',
        'jsdoc/require-returns-type': 'error',
        'jsdoc/require-returns': 'error',
        'jsdoc/valid-types': 'error',

        // eslint modified
        'arrow-parens': ['error', 'as-needed'],
        'camelcase': [
            'error',
            {properties: 'never', ignoreDestructuring: true},
        ],
        'comma-dangle': [
            'error',
            {
                arrays: 'always-multiline',
                objects: 'always-multiline',
                imports: 'always-multiline',
                exports: 'always-multiline',
                functions: 'always-multiline',
            },
        ],
        'dot-location': ['error', 'property'],
        'func-names': ['error', 'never'],
        'indent': ['error', 4, {SwitchCase: 1}],
        'lines-around-comment': [
            'error',
            {
                afterBlockComment: false,
                allowObjectEnd: false,
                allowBlockEnd: false,
                allowArrayEnd: false,
            },
        ],
        'no-empty': ['error', {allowEmptyCatch: true}],
        'no-extra-parens': ['error', 'all', {nestedBinaryExpressions: false}],
        'no-inner-declarations': ['error', 'both'],
        'no-multiple-empty-lines': ['error', {max: 1, maxBOF: 0}],
        'one-var': ['error', {uninitialized: 'always'}],
        'operator-linebreak': ['error', 'before'],
        'padded-blocks': ['error', {classes: 'always', switches: 'never'}],
        'padding-line-between-statements': [
            'error',
            {blankLine: 'always', prev: '*', next: 'multiline-block-like'},
            {blankLine: 'always', prev: 'multiline-block-like', next: '*'},
            {blankLine: 'always', prev: '*', next: 'multiline-const'},
            {blankLine: 'always', prev: 'multiline-const', next: '*'},
            {blankLine: 'always', prev: '*', next: 'multiline-expression'},
            {blankLine: 'always', prev: 'multiline-expression', next: '*'},
            {blankLine: 'always', prev: '*', next: 'multiline-let'},
            {blankLine: 'always', prev: 'multiline-let', next: '*'},
            {blankLine: 'always', prev: 'cjs-import', next: '*'},
            {blankLine: 'never', prev: 'cjs-import', next: 'cjs-import'},
        ],
        'prefer-const': ['error', {destructuring: 'all'}],
        'quote-props': ['error', 'consistent-as-needed'],
        'quotes': ['error', 'single', {avoidEscape: true}],
        'radix': ['error', 'as-needed'],
        'space-before-function-paren': [
            'error',
            {anonymous: 'never', named: 'never', asyncArrow: 'always'},
        ],

        // eslint off
        'array-element-newline': 'off',
        'capitalized-comments': 'off',
        'complexity': 'off',
        'consistent-return': 'off',
        'function-call-argument-newline': 'off',
        'function-paren-newline': 'off',
        'global-require': 'off',
        'guard-for-in': 'off',
        'id-length': 'off',
        'init-declarations': 'off',
        'max-depth': 'off',
        'max-len': 'off',
        'max-lines-per-function': 'off',
        'max-params': 'off',
        'max-statements': 'off',
        'multiline-comment-style': 'off',
        'multiline-ternary': 'off',
        'newline-per-chained-call': 'off',
        'no-await-in-loop': 'off',
        'no-confusing-arrow': 'off',
        'no-console': 'off',
        'no-continue': 'off',
        'no-control-regex': 'off',
        'no-div-regex': 'off',
        'no-invalid-this': 'off',
        'no-magic-numbers': 'off',
        'no-param-reassign': 'off',
        'no-plusplus': 'off',
        'no-process-env': 'off',
        'no-process-exit': 'off',
        'no-promise-executor-return': 'off',
        'no-ternary': 'off',
        'no-unused-expressions': 'off',
        'object-property-newline': 'off',
        'prefer-named-capture-group': 'off',
        'require-atomic-updates': 'off',
        'require-unicode-regexp': 'off',
        'sort-imports': 'off',
        'sort-keys': 'off',
        'wrap-regex': 'off',
    },
};
